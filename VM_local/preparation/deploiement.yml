---
- name: Déploiement automatique depuis le Master
  hosts: Master
  gather_facts: false
  vars:
    remote_task_path: home/ubuntu/task
    local_key_private: ~/.ssh/id_rsa_master
    local_key_public: ~/.ssh/id_rsa_master.pub

  tasks:

    - name: "🔷 Étape 1 : Créer le dossier ~/task sur le Master"
      file:
        path: "{{ remote_task_path }}"
        state: directory
        mode: '0755'

    - name: "🔷 Étape 2 : Générer une paire de clés SSH si absente"
      shell: |
        if [[ ! -f ~/.ssh/id_rsa ]]; then
          ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa
        fi
      args:
        executable: /bin/bash

    - name: "🔷 Étape 3 : Copier les fichiers hosts.ini et ansible.yml vers le Master"
      become: false   
      copy:
        src: "{{ item }}"
        dest: "{{ remote_task_path }}/"
      loop:
        - hosts.ini
        #- ansible.yml

    # - name: "🔷 Étape 4 : Créer le répertoire application/ côté Master (s'il n'existe pas)"
    #   file:
    #     path: "{{ remote_task_path }}/application/"
    #     state: directory
    #     mode: '0755'

    # - name: "🔷 Étape 5 : Transférer le dossier application/ vers le Master"
    #   delegate_to: localhost
    #   shell: scp -r ../../application/* ubuntu@{{ hostvars[inventory_hostname].ansible_host }}:{{ remote_task_path }}/application/
    #   args:
    #     executable: /bin/bash

    - name: "Etape 4+5: Copier application vers le serveur"
      copy:
        src: ../../application
        dest: "{{ remote_task_path }}"
        mode: '0755'

    - name: "🔷 Étape 6 : Récupérer la clé privée du Master"
      fetch:
        src: ~/.ssh/id_rsa
        dest: "{{ local_key_private }}"
        flat: yes
        fail_on_missing: yes

    - name: "🔷 Étape 7 : Récupérer la clé publique du Master"
      fetch:
        src: ~/.ssh/id_rsa.pub
        dest: "{{ local_key_public }}"
        flat: yes
        fail_on_missing: yes

    - name: "🔷 Étape 8 : Copier la clé publique du Master vers tous les hôtes"
      shell: ssh-copy-id -i {{ local_key_public }} -o StrictHostKeyChecking=no {{ hostvars[item].ansible_user | default('ubuntu') }}@{{ hostvars[item].ansible_host }}
      loop: "{{ groups['Application'] + groups['Pipeline'] + groups['Supervision'] }}"
      delegate_to: localhost
      ignore_errors: true

    - name: "🔷 Étape 9 : Installer Ansible sur le Master si nécessaire"
      become: true
      shell: |
        if ! command -v ansible-playbook >/dev/null; then
          apt update -qq
          apt install -yqq software-properties-common
          add-apt-repository --yes --update ppa:ansible/ansible
          apt install -yqq ansible
        fi
      args:
        executable: /bin/bash

    - name: "🔷 Étape 10 : Ajouter les known_hosts pour tous les hôtes"
      shell: |
        grep ansible_host {{ remote_task_path }}/hosts.ini | sed -n 's/.*ansible_host=\([^ ]*\).*/\1/p' | xargs -n1 ssh-keyscan -H >> ~/.ssh/known_hosts
      args:
        executable: /bin/bash

    - name: "🔷 Étape 11 : Nettoyage des clés SSH locales"
      delegate_to: localhost
      file:
        path: "{{ item }}"
        state: absent
      loop:
#       - "{{ local_key_private }}"
        - "{{ local_key_public }}"

    - name: "🛠️ Installation de Docker"
      become: true
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: "📁 Création du dossier /opt/certs"
      become: true
      file:
        path: /opt/certs
        state: directory
        mode: '0755'

    - name: "📄 Copier le script de génération de certificats"
      become: true
      copy:
        src: generate-certs.sh
        dest: /opt/generate-certs.sh
        mode: '0755'

    - name: "🔐 Génération des certificats SSL"
      become: true
      shell: /opt/generate-certs.sh

    - name: "📄 Copier la configuration NGINX"
      become: true
      template:
        src: nginx.conf.j2
        dest: /opt/nginx.conf

    - name: "🚀 Déploiement du conteneur NGINX"
      become: yes
      docker_container:
        name: nginx-proxy
        image: nginx:latest
        state: started
        restart_policy: always
        published_ports:
          - "80:80"
          - "443:443"
        volumes:
          - /opt/nginx.conf:/etc/nginx/nginx.conf:ro
          - /opt/certs:/etc/nginx/certs:ro

    - name: "🌀 Reverse proxy déployé !"
      debug:
        msg: "NGINX reverse proxy est maintenant en place sur les ports 80 et 443 ✅"
